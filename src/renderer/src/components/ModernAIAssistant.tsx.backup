import React, { useState, useEffect } from 'react'
import { 
  ChatCircle, 
  Gear, 
  Activity, 
  Database, 
  Users, 
  ChartBar,
  Server,
  Terminal,
  Brain,
  FlowArrow,
  PaperPlaneTilt,
  Circle,
  Play,
  Pause,
  ArrowCounterClockwise,
  Cpu,
  HardDrive
} from 'phosphor-react'

interface Message {
  type: 'user' | 'ai'
  content: string
  timestamp: Date
}

interface ServiceStatus {
  connected: boolean
  message: string
  starting: boolean
}

interface SystemMetrics {
  cpu: number
  memory: number
  disk: number
  uptime: string
}

const ModernAIAssistant: React.FC = () => {
  const [activePanel, setActivePanel] = useState('dashboard')
  const [messages, setMessages] = useState<Message[]>([])
  const [currentMessage, setCurrentMessage] = useState('')
  const [isThinking, setIsThinking] = useState(false)
  const [selectedModel, setSelectedModel] = useState('tinydolphin:latest')
  const [availableModels, setAvailableModels] = useState<string[]>([])

  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics>({
    cpu: 23,
    memory: 67,
    disk: 45,
    uptime: '2d 14h 23m'
  })

  const [services, setServices] = useState({
    ollama: { connected: false, message: 'Checking...', starting: false },
    chroma: { connected: false, message: 'Checking...', starting: false },
    reddit: { connected: false, message: 'Disconnected', starting: false },
    workflows: { connected: true, message: 'Active', starting: false }
  })

  // Check service status
  const checkOllamaStatus = async () => {
    try {
      const response = await window.api.checkOllamaStatus()
      setServices(prev => ({
        ...prev,
        ollama: {
          connected: response.connected,
          message: response.connected ? 'Online' : 'Offline',
          starting: false
        }
      }))
      if (response.models) {
        setAvailableModels(response.models)
      }
    } catch (error) {
      setServices(prev => ({
        ...prev,
        ollama: { connected: false, message: 'Error', starting: false }
      }))
    }
  }

  const checkChromaStatus = async () => {
    try {
      const response = await window.api.checkChromaStatus()
      setServices(prev => ({
        ...prev,
        chroma: {
          connected: response.connected,
          message: response.connected ? 'Online' : 'Offline',
          starting: false
        }
      }))
    } catch (error) {
      setServices(prev => ({
        ...prev,
        chroma: { connected: false, message: 'Error', starting: false }
      }))
    }
  }

  useEffect(() => {
    checkOllamaStatus()
    checkChromaStatus()
    
    const interval = setInterval(() => {
      checkOllamaStatus()
      checkChromaStatus()
      // Update system metrics
      setSystemMetrics(prev => ({
        ...prev,
        cpu: Math.floor(Math.random() * 30) + 10,
        memory: Math.floor(Math.random() * 20) + 60
      }))
    }, 30000)
    
    return () => clearInterval(interval)
  }, [])

  const handleSendMessage = async () => {
    if (!currentMessage.trim() || isThinking) return

    const userMsg: Message = { type: 'user', content: currentMessage, timestamp: new Date() }
    setMessages(prev => [...prev, userMsg])
    setCurrentMessage('')
    setIsThinking(true)

    try {
      const response = await window.api.chatWithAI({
        message: currentMessage,
        model: selectedModel,
        history: messages.slice(-5)
      })

      const aiMsg: Message = { 
        type: 'ai', 
        content: response.message || 'Error processing request.',
        timestamp: new Date() 
      }
      setMessages(prev => [...prev, aiMsg])
    } catch (error) {
      const errorMsg: Message = { 
        type: 'ai', 
        content: 'Service unavailable.',
        timestamp: new Date() 
      }
      setMessages(prev => [...prev, errorMsg])
    } finally {
      setIsThinking(false)
    }
  }

  const StatusCard = ({ title, value, status, icon: Icon }: {
    title: string
    value: string | number
    status: 'online' | 'offline' | 'warning'
    icon: React.ElementType
  }) => (
    <div className="bg-gray-900 border border-gray-800 rounded-lg p-4">
      <div className="flex items-center justify-between mb-2">
        <Icon size={20} className="text-gray-400" />
        <Circle 
          size={8} 
          className={
            status === 'online' ? 'fill-green-500 text-green-500' :
            status === 'warning' ? 'fill-yellow-500 text-yellow-500' :
            'fill-red-500 text-red-500'
          } 
        />
      </div>
      <div className="text-2xl font-semibold text-white mb-1">{value}</div>
      <div className="text-sm text-gray-400">{title}</div>
    </div>
  )

  const ServiceRow = ({ name, service, onStart }: {
    name: string
    service: ServiceStatus
    onStart?: () => void
  }) => (
    <div className="flex items-center justify-between py-3 border-b border-gray-800 last:border-0">
      <div className="flex items-center gap-3">
        <Circle 
          size={8} 
          className={service.connected ? 'fill-green-500 text-green-500' : 'fill-red-500 text-red-500'} 
        />
        <div>
          <div className="text-sm font-medium text-white">{name}</div>
          <div className="text-xs text-gray-400">{service.message}</div>
        </div>
      </div>
      {!service.connected && onStart && (
        <button 
          onClick={onStart}
          className="text-xs bg-gray-800 text-white px-3 py-1 rounded hover:bg-gray-700"
        >
          Start
        </button>
      )}
    </div>
  )

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* System Overview */}
      <div>
        <h2 className="text-xl font-semibold text-white mb-4">System Overview</h2>
        <div className="grid grid-cols-4 gap-4">
          <StatusCard 
            title="CPU Usage" 
            value={`${systemMetrics.cpu}%`} 
            status={systemMetrics.cpu > 80 ? 'warning' : 'online'}
            icon={Cpu}
          />
          <StatusCard 
            title="Memory" 
            value={`${systemMetrics.memory}%`} 
            status={systemMetrics.memory > 85 ? 'warning' : 'online'}
            icon={Database}
          />
          <StatusCard 
            title="Storage" 
            value={`${systemMetrics.disk}%`} 
            status={systemMetrics.disk > 90 ? 'warning' : 'online'}
            icon={HardDrive}
          />
          <StatusCard 
            title="Uptime" 
            value={systemMetrics.uptime} 
            status="online"
            icon={Server}
          />
        </div>
      </div>

      {/* Services */}
      <div className="grid grid-cols-2 gap-6">
        <div className="bg-gray-900 border border-gray-800 rounded-lg p-6">
          <h3 className="text-lg font-medium text-white mb-4">AI Services</h3>
          <div className="space-y-1">
            <ServiceRow name="Ollama" service={services.ollama} />
            <ServiceRow name="ChromaDB" service={services.chroma} />
            <ServiceRow name="Memory Store" service={{ connected: true, message: 'Active', starting: false }} />
          </div>
        </div>

        <div className="bg-gray-900 border border-gray-800 rounded-lg p-6">
          <h3 className="text-lg font-medium text-white mb-4">Platform Services</h3>
          <div className="space-y-1">
            <ServiceRow name="Reddit Bot" service={services.reddit} />
            <ServiceRow name="Workflows" service={services.workflows} />
            <ServiceRow name="Agent Registry" service={{ connected: true, message: 'Loaded', starting: false }} />
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-gray-900 border border-gray-800 rounded-lg p-6">
        <h3 className="text-lg font-medium text-white mb-4">Quick Actions</h3>
        <div className="grid grid-cols-4 gap-3">
          <button className="bg-gray-800 hover:bg-gray-700 text-white py-3 px-4 rounded-lg text-sm font-medium">
            Restart Services
          </button>
          <button className="bg-gray-800 hover:bg-gray-700 text-white py-3 px-4 rounded-lg text-sm font-medium">
            Clear Memory
          </button>
          <button className="bg-gray-800 hover:bg-gray-700 text-white py-3 px-4 rounded-lg text-sm font-medium">
            Export Logs
          </button>
          <button className="bg-gray-800 hover:bg-gray-700 text-white py-3 px-4 rounded-lg text-sm font-medium">
            System Health
          </button>
        </div>
      </div>
    </div>
  )

  const renderChat = () => (
    <div className="h-full flex flex-col">
      <div className="flex-1 overflow-y-auto space-y-4 mb-4">
        {messages.length === 0 ? (
          <div className="text-center text-gray-400 mt-8">
            <ChatCircle size={48} className="mx-auto mb-4 opacity-50" />
            <p>Start a conversation with your AI assistant</p>
          </div>
        ) : (
          messages.map((message, index) => (
            <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-2xl ${message.type === 'user' ? 'text-right' : 'text-left'}`}>
                <div className={`inline-block p-4 rounded-lg ${
                  message.type === 'user' 
                    ? 'bg-gray-800 text-white' 
                    : 'bg-gray-900 border border-gray-800 text-gray-100'
                }`}>
                  <p className="text-sm leading-relaxed">{message.content}</p>
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </p>
              </div>
            </div>
          ))
        )}
        
        {isThinking && (
          <div className="flex justify-start">
            <div className="max-w-2xl">
              <div className="inline-block p-4 rounded-lg bg-gray-900 border border-gray-800">
                <div className="flex items-center gap-2 text-gray-400">
                  <div className="flex gap-1">
                    <div className="w-1 h-1 bg-current rounded-full animate-pulse" />
                    <div className="w-1 h-1 bg-current rounded-full animate-pulse delay-100" />
                    <div className="w-1 h-1 bg-current rounded-full animate-pulse delay-200" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="flex gap-3">
        <input
          type="text"
          value={currentMessage}
          onChange={(e) => setCurrentMessage(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          placeholder="Message AI assistant..."
          className="flex-1 bg-gray-900 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-gray-500"
          disabled={isThinking || !services.ollama.connected}
        />
        <button
          onClick={handleSendMessage}
          disabled={!currentMessage.trim() || isThinking || !services.ollama.connected}
          className="px-4 py-3 bg-white text-black rounded-lg font-medium hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          <PaperPlaneTilt size={16} />
        </button>
      </div>
    </div>
  )

  const navigationItems = [
    { id: 'dashboard', label: 'Dashboard', icon: ChartBar },
    { id: 'chat', label: 'AI Chat', icon: ChatCircle },
    { id: 'agents', label: 'Agents', icon: Users },
    { id: 'workflows', label: 'Workflows', icon: FlowArrow },
    { id: 'memory', label: 'Memory', icon: Brain },
    { id: 'analytics', label: 'Analytics', icon: Activity },
    { id: 'terminal', label: 'Terminal', icon: Terminal },
    { id: 'settings', label: 'Settings', icon: Gear }
  ]

  return (
    <div className="h-screen bg-black text-white flex">
      {/* Sidebar */}
      <div className="w-64 bg-gray-900 border-r border-gray-800 flex flex-col">
        <div className="p-6 border-b border-gray-800">
          <h1 className="text-xl font-semibold text-white">Puffer</h1>
          <p className="text-sm text-gray-400">AI Platform</p>
        </div>

        <nav className="flex-1 p-4">
          <div className="space-y-1">
            {navigationItems.map((item) => (
              <button
                key={item.id}
                onClick={() => setActivePanel(item.id)}
                className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-colors ${
                  activePanel === item.id 
                    ? 'bg-gray-800 text-white' 
                    : 'text-gray-400 hover:text-white hover:bg-gray-800'
                }`}
              >
                <item.icon size={18} />
                <span className="text-sm font-medium">{item.label}</span>
              </button>
            ))}
          </div>
        </nav>

        <div className="p-4 border-t border-gray-800">
          <div className="flex items-center gap-2 text-sm text-gray-400">
            <Circle size={8} className="fill-green-500 text-green-500" />
            <span>System Online</span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        <header className="px-6 py-4 border-b border-gray-800 flex items-center justify-between">
          <div>
            <h2 className="text-lg font-semibold text-white capitalize">
              {activePanel === 'dashboard' ? 'System Dashboard' : activePanel}
            </h2>
            {activePanel === 'chat' && (
              <div className="flex items-center gap-2 mt-1">
                <select 
                  value={selectedModel}
                  onChange={(e) => setSelectedModel(e.target.value)}
                  className="bg-black border border-gray-700 rounded px-2 py-1 text-xs text-white focus:outline-none focus:border-gray-500"
                  disabled={!services.ollama.connected}
                >
                  {availableModels.length > 0 ? (
                    availableModels.map(model => (
                      <option key={model} value={model}>
                        {model.split(':')[0]}
                      </option>
                    ))
                  ) : (
                    <option value="">No models</option>
                  )}
                </select>
              </div>
            )}
          </div>
          <div className="flex items-center gap-4">
            <div className="text-sm text-gray-400">
              {new Date().toLocaleTimeString()}
            </div>
          </div>
        </header>

        <main className="flex-1 p-6 overflow-y-auto">
          {activePanel === 'dashboard' && renderDashboard()}
          {activePanel === 'chat' && renderChat()}
          {activePanel !== 'dashboard' && activePanel !== 'chat' && (
            <div className="flex items-center justify-center h-full text-gray-400">
              <div className="text-center">
                <div className="text-4xl mb-4">🚧</div>
                <p>Panel under development</p>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  )
}

export default ModernAIAssistant